"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UNSRegistryForwarderMock__factory = void 0;
const ethers_1 = require("ethers");
const _abi = [
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "uint8",
                name: "version",
                type: "uint8",
            },
        ],
        name: "Initialized",
        type: "event",
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "address",
                        name: "from",
                        type: "address",
                    },
                    {
                        internalType: "uint256",
                        name: "nonce",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "tokenId",
                        type: "uint256",
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes",
                    },
                ],
                internalType: "struct IForwarder.ForwardRequest",
                name: "req",
                type: "tuple",
            },
            {
                internalType: "bytes",
                name: "signature",
                type: "bytes",
            },
        ],
        name: "execute",
        outputs: [
            {
                internalType: "bytes",
                name: "",
                type: "bytes",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "initialize",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "tokenId",
                type: "uint256",
            },
        ],
        name: "nonceOf",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "address",
                        name: "from",
                        type: "address",
                    },
                    {
                        internalType: "uint256",
                        name: "nonce",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "tokenId",
                        type: "uint256",
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes",
                    },
                ],
                internalType: "struct IForwarder.ForwardRequest",
                name: "req",
                type: "tuple",
            },
            {
                internalType: "bytes",
                name: "signature",
                type: "bytes",
            },
        ],
        name: "verify",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
];
const _bytecode = "0x608060405234801561001057600080fd5b50610cf8806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80631bf7e13e146100515780636ccbae5f1461007a5780638129fc1c146100a8578063a4247400146100b2575b600080fd5b61006461005f3660046108d4565b6100d5565b60405161007191906109c3565b60405180910390f35b61009a6100883660046109d6565b60009081526035602052604090205490565b604051908152602001610071565b6100b06101e5565b005b6100c56100c03660046108d4565b6102f6565b6040519015158152602001610071565b606060005a90506100e78585856102f6565b6101485760405162461bcd60e51b815260206004820152602760248201527f554e535265676973747279466f727761726465723a205349474e41545552455f6044820152661253959053125160ca1b60648201526084015b60405180910390fd5b6101da6101586020870187610a0b565b3060408801358461016c60608b018b610a26565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8e018190048102820181019092528c815292508c91508b908190840183828082843760009201919091525061034992505050565b9150505b9392505050565b600054610100900460ff16158080156102055750600054600160ff909116105b8061021f5750303b15801561021f575060005460ff166001145b6102825760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161013f565b6000805460ff1916600117905580156102a5576000805461ff0019166101001790555b6102ad61042a565b80156102f3576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b600061034161030485610add565b3085858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061045b92505050565b949350505050565b6060610354856105a4565b600080876001600160a01b03168661036e8b8a89896105d0565b60405161037b9190610b9e565b60006040518083038160008787f1925050503d80600081146103b9576040519150601f19603f3d011682016040523d82523d6000602084013e6103be565b606091505b5090925090506103cf603f87610bba565b5a116103dd576103dd610bdc565b61041d82826040518060400160405280601a81526020017f42617365466f727761726465723a2043414c4c5f4641494c4544000000000000815250610600565b9998505050505050505050565b600054610100900460ff166104515760405162461bcd60e51b815260040161013f90610bf2565b610459610639565b565b6040838101519051636ccbae5f60e01b8152600481019190915260009081903090636ccbae5f90602401602060405180830381865afa1580156104a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c69190610c3d565b905060006105748660600151805190602001208688602001516040516020016105149392919092835260609190911b6bffffffffffffffffffffffff19166020830152603482015260540190565b60408051601f1981840301815282825280516020918201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000084830152603c8085019190915282518085039091018152605c909301909152815191012090565b905081866020015114801561059a5750855161059a906001600160a01b03168286610660565b9695505050505050565b6000818152603560205260409020546105be906001610c56565b60009182526035602052604090912055565b60608285856040516020016105e793929190610c7d565b6040516020818303038152906040529050949350505050565b6060831561060f5750816101de565b82511561061f5782518084602001fd5b8160405162461bcd60e51b815260040161013f91906109c3565b600054610100900460ff166104595760405162461bcd60e51b815260040161013f90610bf2565b600080600061066f85856107a2565b9092509050600081600481111561068857610688610cbc565b1480156106a65750856001600160a01b0316826001600160a01b0316145b156106b6576001925050506101de565b600080876001600160a01b0316631626ba7e60e01b88886040516024016106de929190610cd2565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161071c9190610b9e565b600060405180830381855afa9150503d8060008114610757576040519150601f19603f3d011682016040523d82523d6000602084013e61075c565b606091505b509150915081801561076f575080516020145b801561079657508051630b135d3f60e11b906107949083016020908101908401610c3d565b145b98975050505050505050565b60008082516041036107d85760208301516040840151606085015160001a6107cc878285856107e7565b945094505050506107e0565b506000905060025b9250929050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561081e57506000905060036108cb565b8460ff16601b1415801561083657508460ff16601c14155b1561084757506000905060046108cb565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561089b573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166108c4576000600192509250506108cb565b9150600090505b94509492505050565b6000806000604084860312156108e957600080fd5b833567ffffffffffffffff8082111561090157600080fd5b908501906080828803121561091557600080fd5b9093506020850135908082111561092b57600080fd5b818601915086601f83011261093f57600080fd5b81358181111561094e57600080fd5b87602082850101111561096057600080fd5b6020830194508093505050509250925092565b60005b8381101561098e578181015183820152602001610976565b50506000910152565b600081518084526109af816020860160208601610973565b601f01601f19169290920160200192915050565b6020815260006101de6020830184610997565b6000602082840312156109e857600080fd5b5035919050565b80356001600160a01b0381168114610a0657600080fd5b919050565b600060208284031215610a1d57600080fd5b6101de826109ef565b6000808335601e19843603018112610a3d57600080fd5b83018035915067ffffffffffffffff821115610a5857600080fd5b6020019150368190038213156107e057600080fd5b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff81118282101715610aa657610aa6610a6d565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610ad557610ad5610a6d565b604052919050565b600060808236031215610aef57600080fd5b610af7610a83565b610b00836109ef565b81526020808401358183015260408401356040830152606084013567ffffffffffffffff80821115610b3157600080fd5b9085019036601f830112610b4457600080fd5b813581811115610b5657610b56610a6d565b610b68601f8201601f19168501610aac565b91508082523684828501011115610b7e57600080fd5b808484018584013760009082019093019290925250606082015292915050565b60008251610bb0818460208701610973565b9190910192915050565b600082610bd757634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052600160045260246000fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060208284031215610c4f57600080fd5b5051919050565b80820180821115610c7757634e487b7160e01b600052601160045260246000fd5b92915050565b60008451610c8f818460208901610973565b60609490941b6bffffffffffffffffffffffff191691909301908152601481019190915260340192915050565b634e487b7160e01b600052602160045260246000fd5b828152604060208201526000610341604083018461099756fea164736f6c6343000811000a";
const isSuperArgs = (xs) => xs.length > 1;
class UNSRegistryForwarderMock__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    connect(runner) {
        return super.connect(runner);
    }
    static createInterface() {
        return new ethers_1.Interface(_abi);
    }
    static connect(address, runner) {
        return new ethers_1.Contract(address, _abi, runner);
    }
}
exports.UNSRegistryForwarderMock__factory = UNSRegistryForwarderMock__factory;
UNSRegistryForwarderMock__factory.bytecode = _bytecode;
UNSRegistryForwarderMock__factory.abi = _abi;
